{
	// Place your StripeTastic workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.



	// Example:
	"StripeBridgeNamespace": {
		"scope": "cpp, c++",
		"prefix": "nsb",
		"body": [
            "#pragma once",
            "",
            "namespace StripeBridge",
            "{",
            "    namespace ${1:namespaceName}",
            "    {",
            "        ${2:objectType} ${3:objectName}",
            "        {",
            "            $0",
            "        }",
            "    } // namespace ${1:namespaceName}",
            "} // namespace StripeBridge"
		],
		"description": "Writes the nested StripeBrdige namespace."
    },
    "Tagged call to logger": {
		"scope": "cpp, c++",
		"prefix": "log",
		"body": [
            "_logger->Log(_loggerTag, \"$0\");",
		],
		"description": "Simple call the _logger->Log function with _loggerTag."
	},"StripeInstance source implementation.": {
		"scope": "cpp, c++",
		"prefix": "svoid",
		"body": [
            "template <class TRmtMethod>",
            "void StripeInstance<TRmtMethod>::${1:FunctionName}()",
            "{",
            "    $0",
            "}",
		],
		"description": "Simple call the _logger->Log function with _loggerTag."
	}
}